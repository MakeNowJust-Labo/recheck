package codes.quine.labo.re
package unicode

import com.ibm.icu.lang.UCharacter
import com.ibm.icu.lang.UCharacterEnums.ECharacterCategory
import com.ibm.icu.lang.UProperty
import com.ibm.icu.text.UnicodeSet

import data.IntervalSet
import data.UChar

/** Utilities for Unicode properties. */
object Property {

  /** Binary property names list.
    *
    * See [[https://www.ecma-international.org/ecma-262/11.0/index.html#table-binary-unicode-properties]].
    *
    * Note that "ASCII", "Any" and "Assigned" are excluded because
    * they are special propery defined in [[https://unicode.org/reports/tr18/#General_Category_Property UTS #18]].
    */
  val BinaryPropertyNames: Set[String] = Set(
    "ASCII_Hex_Digit",
    "AHex",
    "Alphabetic",
    "Alpha",
    "Bidi_Control",
    "Bidi_C",
    "Bidi_Mirrored",
    "Bidi_M",
    "Case_Ignorable",
    "CI",
    "Cased",
    "Changes_When_Casefolded",
    "CWCF",
    "Changes_When_Casemapped",
    "CWCM",
    "Changes_When_Lowercased",
    "CWL",
    "Changes_When_NFKC_Casefolded",
    "CWKCF",
    "Changes_When_Titlecased",
    "CWT",
    "Changes_When_Uppercased",
    "CWU",
    "Dash",
    "Default_Ignorable_Code_Point",
    "DI",
    "Deprecated",
    "Dep",
    "Diacritic",
    "Dia",
    "Emoji",
    "Emoji_Component",
    "Emoji_Modifier",
    "Emoji_Modifier_Base",
    "Emoji_Presentation",
    "Extended_Pictographic",
    "Extender",
    "Ext",
    "Grapheme_Base",
    "Gr_Base",
    "Grapheme_Extend",
    "Gr_Ext",
    "Hex_Digit",
    "Hex",
    "IDS_Binary_Operator",
    "IDSB",
    "IDS_Trinary_Operator",
    "IDST",
    "ID_Continue",
    "IDC",
    "ID_Start",
    "IDS",
    "Ideographic",
    "Ideo",
    "Join_Control",
    "Join_C",
    "Logical_Order_Exception",
    "LOE",
    "Lowercase",
    "Lower",
    "Math",
    "Noncharacter_Code_Point",
    "NChar",
    "Pattern_Syntax",
    "Pat_Syn",
    "Pattern_White_Space",
    "Pat_WS",
    "Quotation_Mark",
    "QMark",
    "Radical",
    "Regional_Indicator",
    "RI",
    "Sentence_Terminal",
    "STerm",
    "Soft_Dotted",
    "SD",
    "Terminal_Punctuation",
    "Term",
    "Unified_Ideograph",
    "UIdeo",
    "Uppercase",
    "Upper",
    "Variation_Selector",
    "VS",
    "White_Space",
    "space",
    "XID_Continue",
    "XIDC",
    "XID_Start",
    "XIDS"
  )

  /** "General_Category" name itself and its alias.
    *
    * See [[https://www.ecma-international.org/ecma-262/11.0/index.html#table-nonbinary-unicode-properties]].
    */
  val GeneralCategoryNames: Set[String] = Set("General_Category", "gc")

  /** "General_Category" values list.
    *
    * See [[https://www.ecma-international.org/ecma-262/11.0/index.html#table-unicode-general-category-values]].
    */
  val GeneralCategoryValues: Set[String] = Set(
    "Cased_Letter",
    "LC",
    "Close_Punctuation",
    "Pe",
    "Connector_Punctuation",
    "Pc",
    "Control",
    "Cc",
    "cntrl",
    "Currency_Symbol",
    "Sc",
    "Dash_Punctuation",
    "Pd",
    "Decimal_Number",
    "Nd",
    "digit",
    "Enclosing_Mark",
    "Me",
    "Final_Punctuation",
    "Pf",
    "Format",
    "Cf",
    "Initial_Punctuation",
    "Pi",
    "Letter",
    "L",
    "Letter_Number",
    "Nl",
    "Line_Separator",
    "Zl",
    "Lowercase_Letter",
    "Ll",
    "Mark",
    "M",
    "Combining_Mark",
    "Math_Symbol",
    "Sm",
    "Modifier_Letter",
    "Lm",
    "Modifier_Symbol",
    "Sk",
    "Nonspacing_Mark",
    "Mn",
    "Number",
    "N",
    "Open_Punctuation",
    "Ps",
    "Other",
    "C",
    "Other_Letter",
    "Lo",
    "Other_Number",
    "No",
    "Other_Punctuation",
    "Po",
    "Other_Symbol",
    "So",
    "Paragraph_Separator",
    "Zp",
    "Private_Use",
    "Co",
    "Punctuation",
    "P",
    "punct",
    "Separator",
    "Z",
    "Space_Separator",
    "Zs",
    "Spacing_Mark",
    "Mc",
    "Surrogate",
    "Cs",
    "Symbol",
    "S",
    "Titlecase_Letter",
    "Lt",
    "Unassigned",
    "Cn",
    "Uppercase_Letter",
    "Lu"
  )

  /** "Script" name itself and its alias.
    *
    * See [[https://www.ecma-international.org/ecma-262/11.0/index.html#table-nonbinary-unicode-properties]].
    */
  val ScriptNames: Set[String] = Set("Script", "sc")

  /** "Script_Extensions" name itself and its alias.
    *
    * See [[https://www.ecma-international.org/ecma-262/11.0/index.html#table-nonbinary-unicode-properties]].
    */
  val ScriptExtensionsNames: Set[String] = Set("Script_Extensions", "scx")

  /** "Script" and "Script_Extensions" values list.
    *
    * See [[https://www.ecma-international.org/ecma-262/11.0/index.html#table-unicode-script-values]].
    */
  val ScriptValues: Set[String] = Set(
    "Adlam",
    "Adlm",
    "Ahom",
    "Ahom",
    "Anatolian_Hieroglyphs",
    "Hluw",
    "Arabic",
    "Arab",
    "Armenian",
    "Armn",
    "Avestan",
    "Avst",
    "Balinese",
    "Bali",
    "Bamum",
    "Bamu",
    "Bassa_Vah",
    "Bass",
    "Batak",
    "Batk",
    "Bengali",
    "Beng",
    "Bhaiksuki",
    "Bhks",
    "Bopomofo",
    "Bopo",
    "Brahmi",
    "Brah",
    "Braille",
    "Brai",
    "Buginese",
    "Bugi",
    "Buhid",
    "Buhd",
    "Canadian_Aboriginal",
    "Cans",
    "Carian",
    "Cari",
    "Caucasian_Albanian",
    "Aghb",
    "Chakma",
    "Cakm",
    "Cham",
    "Cham",
    "Cherokee",
    "Cher",
    "Common",
    "Zyyy",
    "Coptic",
    "Copt",
    "Qaac",
    "Cuneiform",
    "Xsux",
    "Cypriot",
    "Cprt",
    "Cyrillic",
    "Cyrl",
    "Deseret",
    "Dsrt",
    "Devanagari",
    "Deva",
    "Dogra",
    "Dogr",
    "Duployan",
    "Dupl",
    "Egyptian_Hieroglyphs",
    "Egyp",
    "Elbasan",
    "Elba",
    "Elymaic",
    "Elym",
    "Ethiopic",
    "Ethi",
    "Georgian",
    "Geor",
    "Glagolitic",
    "Glag",
    "Gothic",
    "Goth",
    "Grantha",
    "Gran",
    "Greek",
    "Grek",
    "Gujarati",
    "Gujr",
    "Gunjala_Gondi",
    "Gong",
    "Gurmukhi",
    "Guru",
    "Han",
    "Hani",
    "Hangul",
    "Hang",
    "Hanifi_Rohingya",
    "Rohg",
    "Hanunoo",
    "Hano",
    "Hatran",
    "Hatr",
    "Hebrew",
    "Hebr",
    "Hiragana",
    "Hira",
    "Imperial_Aramaic",
    "Armi",
    "Inherited",
    "Zinh",
    "Qaai",
    "Inscriptional_Pahlavi",
    "Phli",
    "Inscriptional_Parthian",
    "Prti",
    "Javanese",
    "Java",
    "Kaithi",
    "Kthi",
    "Kannada",
    "Knda",
    "Katakana",
    "Kana",
    "Kayah_Li",
    "Kali",
    "Kharoshthi",
    "Khar",
    "Khmer",
    "Khmr",
    "Khojki",
    "Khoj",
    "Khudawadi",
    "Sind",
    "Lao",
    "Laoo",
    "Latin",
    "Latn",
    "Lepcha",
    "Lepc",
    "Limbu",
    "Limb",
    "Linear_A",
    "Lina",
    "Linear_B",
    "Linb",
    "Lisu",
    "Lisu",
    "Lycian",
    "Lyci",
    "Lydian",
    "Lydi",
    "Mahajani",
    "Mahj",
    "Makasar",
    "Maka",
    "Malayalam",
    "Mlym",
    "Mandaic",
    "Mand",
    "Manichaean",
    "Mani",
    "Marchen",
    "Marc",
    "Medefaidrin",
    "Medf",
    "Masaram_Gondi",
    "Gonm",
    "Meetei_Mayek",
    "Mtei",
    "Mende_Kikakui",
    "Mend",
    "Meroitic_Cursive",
    "Merc",
    "Meroitic_Hieroglyphs",
    "Mero",
    "Miao",
    "Plrd",
    "Modi",
    "Modi",
    "Mongolian",
    "Mong",
    "Mro",
    "Mroo",
    "Multani",
    "Mult",
    "Myanmar",
    "Mymr",
    "Nabataean",
    "Nbat",
    "Nandinagari",
    "Nand",
    "New_Tai_Lue",
    "Talu",
    "Newa",
    "Newa",
    "Nko",
    "Nkoo",
    "Nushu",
    "Nshu",
    "Nyiakeng_Puachue_Hmong",
    "Hmnp",
    "Ogham",
    "Ogam",
    "Ol_Chiki",
    "Olck",
    "Old_Hungarian",
    "Hung",
    "Old_Italic",
    "Ital",
    "Old_North_Arabian",
    "Narb",
    "Old_Permic",
    "Perm",
    "Old_Persian",
    "Xpeo",
    "Old_Sogdian",
    "Sogo",
    "Old_South_Arabian",
    "Sarb",
    "Old_Turkic",
    "Orkh",
    "Oriya",
    "Orya",
    "Osage",
    "Osge",
    "Osmanya",
    "Osma",
    "Pahawh_Hmong",
    "Hmng",
    "Palmyrene",
    "Palm",
    "Pau_Cin_Hau",
    "Pauc",
    "Phags_Pa",
    "Phag",
    "Phoenician",
    "Phnx",
    "Psalter_Pahlavi",
    "Phlp",
    "Rejang",
    "Rjng",
    "Runic",
    "Runr",
    "Samaritan",
    "Samr",
    "Saurashtra",
    "Saur",
    "Sharada",
    "Shrd",
    "Shavian",
    "Shaw",
    "Siddham",
    "Sidd",
    "SignWriting",
    "Sgnw",
    "Sinhala",
    "Sinh",
    "Sogdian",
    "Sogd",
    "Sora_Sompeng",
    "Sora",
    "Soyombo",
    "Soyo",
    "Sundanese",
    "Sund",
    "Syloti_Nagri",
    "Sylo",
    "Syriac",
    "Syrc",
    "Tagalog",
    "Tglg",
    "Tagbanwa",
    "Tagb",
    "Tai_Le",
    "Tale",
    "Tai_Tham",
    "Lana",
    "Tai_Viet",
    "Tavt",
    "Takri",
    "Takr",
    "Tamil",
    "Taml",
    "Tangut",
    "Tang",
    "Telugu",
    "Telu",
    "Thaana",
    "Thaa",
    "Thai",
    "Thai",
    "Tibetan",
    "Tibt",
    "Tifinagh",
    "Tfng",
    "Tirhuta",
    "Tirh",
    "Ugaritic",
    "Ugar",
    "Vai",
    "Vaii",
    "Wancho",
    "Wcho",
    "Warang_Citi",
    "Wara",
    "Yi",
    "Yiii",
    "Zanabazar_Square",
    "Zanb"
  )

  /** Builds a interval set from the UnicodeSet object. */
  private def build(uset: UnicodeSet): IntervalSet[UChar] = {
    val intervals =
      (0 until uset.getRangeCount).map(i => (UChar(uset.getRangeStart(i)), UChar(uset.getRangeEnd(i) + 1)))
    IntervalSet.from(intervals)
  }

  /** Returns an interval set corresponding to the binary property. */
  def binary(name: String): Option[IntervalSet[UChar]] = name match {
    case "ASCII" => Some(IntervalSet((UChar(0), UChar(0x80))))
    case "Any"   => Some(IntervalSet((UChar(0), UChar(0x110000))))
    case "Assigned" =>
      val uset =
        new UnicodeSet().applyIntPropertyValue(UProperty.GENERAL_CATEGORY, ECharacterCategory.UNASSIGNED).complement()
      Some(build(uset))
    case name if BinaryPropertyNames.contains(name) =>
      val prop = UCharacter.getPropertyEnum(name)
      val uset = new UnicodeSet().applyIntPropertyValue(prop, 1)
      Some(build(uset))
    case _ => None
  }

  /** Returns an interval set corresponding to the "General_Category" property value. */
  def generalCategory(value: String): Option[IntervalSet[UChar]] =
    if (GeneralCategoryValues.contains(value)) {
      val propValue = UCharacter.getPropertyValueEnum(UProperty.GENERAL_CATEGORY, value)
      val uset = new UnicodeSet().applyIntPropertyValue(UProperty.GENERAL_CATEGORY, propValue)
      Some(build(uset))
    } else None

  /** Returns an interval set corresponding to the "Script" property value. */
  def script(value: String): Option[IntervalSet[UChar]] =
    if (ScriptValues.contains(value)) {
      val propValue = UCharacter.getPropertyValueEnum(UProperty.SCRIPT, value)
      val uset = new UnicodeSet().applyIntPropertyValue(UProperty.SCRIPT, propValue)
      Some(build(uset))
    } else None

  /** Returns an interval set corresponding to the "Script_Extensions" property value. */
  def scriptExtensions(value: String): Option[IntervalSet[UChar]] =
    if (ScriptValues.contains(value)) {
      val propValue = UCharacter.getPropertyValueEnum(UProperty.SCRIPT, value)
      val uset = new UnicodeSet().applyIntPropertyValue(UProperty.SCRIPT_EXTENSIONS, propValue)
      Some(build(uset))
    } else None
}
